use std::env;
use std::path::Path;

fn main() {
    let mut atoms = Vec::new();
    atoms.push("read");
    atoms.push("write");
    atoms.push("open");
    atoms.push("close");
    atoms.push("stat");
    atoms.push("fstat");
    atoms.push("lstat");
    atoms.push("poll");
    atoms.push("lseek");
    atoms.push("mmap");
    atoms.push("mprotect");
    atoms.push("munmap");
    atoms.push("brk");
    atoms.push("rt_sigaction");
    atoms.push("rt_sigprocmask");
    atoms.push("rt_sigreturn");
    atoms.push("ioctl");
    atoms.push("pread64");
    atoms.push("pwrite64");
    atoms.push("readv");
    atoms.push("writev");
    atoms.push("access");
    atoms.push("pipe");
    atoms.push("select");
    atoms.push("sched_yield");
    atoms.push("mremap");
    atoms.push("msync");
    atoms.push("mincore");
    atoms.push("madvise");
    atoms.push("shmget");
    atoms.push("shmat");
    atoms.push("shmctl");
    atoms.push("dup");
    atoms.push("dup2");
    atoms.push("pause");
    atoms.push("nanosleep");
    atoms.push("getitimer");
    atoms.push("alarm");
    atoms.push("setitimer");
    atoms.push("getpid");
    atoms.push("sendfile");
    atoms.push("socket");
    atoms.push("connect");
    atoms.push("accept");
    atoms.push("send");
    atoms.push("sendto");
    atoms.push("recv");
    atoms.push("recvfrom");
    atoms.push("sendmsg");
    atoms.push("recvmsg");
    atoms.push("shutdown");
    atoms.push("bind");
    atoms.push("listen");
    atoms.push("getsockname");
    atoms.push("getpeername");
    atoms.push("socketpair");
    atoms.push("setsockopt");
    atoms.push("getsockopt");
    atoms.push("clone");
    atoms.push("fork");
    atoms.push("vfork");
    atoms.push("execve");
    atoms.push("exit");
    atoms.push("wait4");
    atoms.push("kill");
    atoms.push("uname");
    atoms.push("semget");
    atoms.push("semop");
    atoms.push("semctl");
    atoms.push("shmdt");
    atoms.push("msgget");
    atoms.push("msgsnd");
    atoms.push("msgrcv");
    atoms.push("msgctl");
    atoms.push("fcntl");
    atoms.push("flock");
    atoms.push("fsync");
    atoms.push("fdatasync");
    atoms.push("truncate");
    atoms.push("ftruncate");
    atoms.push("getdents");
    atoms.push("getcwd");
    atoms.push("chdir");
    atoms.push("fchdir");
    atoms.push("rename");
    atoms.push("mkdir");
    atoms.push("rmdir");
    atoms.push("creat");
    atoms.push("link");
    atoms.push("unlink");
    atoms.push("symlink");
    atoms.push("readlink");
    atoms.push("chmod");
    atoms.push("fchmod");
    atoms.push("chown");
    atoms.push("fchown");
    atoms.push("lchown");
    atoms.push("umask");
    atoms.push("gettimeofday");
    atoms.push("getrlimit");
    atoms.push("getrusage");
    atoms.push("sysinfo");
    atoms.push("sync");
    atoms.push("times");
    atoms.push("ptrace");
    atoms.push("getuid");
    atoms.push("syslog");
    atoms.push("getgid");
    atoms.push("setuid");
    atoms.push("setgid");
    atoms.push("geteuid");
    atoms.push("getegid");
    atoms.push("setpgid");
    atoms.push("getppid");
    atoms.push("getpgrp");
    atoms.push("setsid");
    atoms.push("setreuid");
    atoms.push("setregid");
    atoms.push("getgroups");
    atoms.push("setgroups");
    atoms.push("setresuid");
    atoms.push("getresuid");
    atoms.push("setresgid");
    atoms.push("getresgid");
    atoms.push("getpgid");
    atoms.push("setfsuid");
    atoms.push("setfsgid");
    atoms.push("getsid");
    atoms.push("capget");
    atoms.push("capset");
    atoms.push("rt_sigpending");
    atoms.push("rt_sigtimedwait");
    atoms.push("rt_sigqueueinfo");
    atoms.push("rt_sigsuspend");
    atoms.push("sigaltstack");
    atoms.push("utime");
    atoms.push("mknod");
    atoms.push("uselib");
    atoms.push("personality");
    atoms.push("ustat");
    atoms.push("statfs");
    atoms.push("fstatfs");
    atoms.push("sysfs");
    atoms.push("getpriority");
    atoms.push("setpriority");
    atoms.push("sched_setparam");
    atoms.push("sched_getparam");
    atoms.push("sched_setscheduler");
    atoms.push("sched_getscheduler");
    atoms.push("sched_get_priority_max},");
    atoms.push("sched_get_priority_min},");
    atoms.push("mlock");
    atoms.push("munlock");
    atoms.push("mlockall");
    atoms.push("munlockall");
    atoms.push("vhangup");
    atoms.push("modify_ldt");
    atoms.push("pivot_root");
    atoms.push("_sysctl");
    atoms.push("prctl");
    atoms.push("arch_prctl");
    atoms.push("adjtimex");
    atoms.push("setrlimit");
    atoms.push("chroot");
    atoms.push("sync");
    atoms.push("acct");
    atoms.push("settimeofday");
    atoms.push("mount");
    atoms.push("umount2");
    atoms.push("swapon");
    atoms.push("swapoff");
    atoms.push("reboot");
    atoms.push("sethostname");
    atoms.push("setdomainname");
    atoms.push("iopl");
    atoms.push("ioperm");
    atoms.push("create_module");
    atoms.push("init_module");
    atoms.push("delete_module");
    atoms.push("get_kernel_syms");
    atoms.push("query_module");
    atoms.push("quotactl");
    atoms.push("nfsservctl");
    atoms.push("getpmsg");
    atoms.push("putpmsg");
    atoms.push("afs_syscall");
    atoms.push("tuxcall");
    atoms.push("security");
    atoms.push("gettid");
    atoms.push("readahead");
    atoms.push("setxattr");
    atoms.push("lsetxattr");
    atoms.push("fsetxattr");
    atoms.push("getxattr");
    atoms.push("lgetxattr");
    atoms.push("fgetxattr");
    atoms.push("listxattr");
    atoms.push("llistxattr");
    atoms.push("flistxattr");
    atoms.push("removexattr");
    atoms.push("lremovexattr");
    atoms.push("fremovexattr");
    atoms.push("tkill");
    atoms.push("time");
    atoms.push("futex");
    atoms.push("sched_setaffinity");
    atoms.push("sched_getaffinity");
    atoms.push("set_thread_area");
    atoms.push("io_setup");
    atoms.push("io_destroy");
    atoms.push("io_getevents");
    atoms.push("io_submit");
    atoms.push("io_cancel");
    atoms.push("get_thread_area");
    atoms.push("lookup_dcookie");
    atoms.push("epoll_create");
    atoms.push("epoll_ctl_old");
    atoms.push("epoll_wait_old");
    atoms.push("remap_file_pages");
    atoms.push("getdents64");
    atoms.push("set_tid_address");
    atoms.push("restart_syscall");
    atoms.push("semtimedop");
    atoms.push("fadvise64");
    atoms.push("timer_create");
    atoms.push("timer_settime");
    atoms.push("timer_gettime");
    atoms.push("timer_getoverrun");
    atoms.push("timer_delete");
    atoms.push("clock_settime");
    atoms.push("clock_gettime");
    atoms.push("clock_getres");
    atoms.push("clock_nanosleep");
    atoms.push("exit_group");
    atoms.push("epoll_wait");
    atoms.push("epoll_ctl");
    atoms.push("tgkill");
    atoms.push("utimes");
    atoms.push("vserver");
    atoms.push("mbind");
    atoms.push("set_mempolicy");
    atoms.push("get_mempolicy");
    atoms.push("mq_open");
    atoms.push("mq_unlink");
    atoms.push("mq_timedsend");
    atoms.push("mq_timedreceive");
    atoms.push("mq_notify");
    atoms.push("mq_getsetattr");
    atoms.push("kexec_load");
    atoms.push("waitid");
    atoms.push("add_key");
    atoms.push("request_key");
    atoms.push("keyctl");
    atoms.push("ioprio_set");
    atoms.push("ioprio_get");
    atoms.push("inotify_init");
    atoms.push("inotify_add_watch");
    atoms.push("inotify_rm_watch");
    atoms.push("migrate_pages");
    atoms.push("openat");
    atoms.push("mkdirat");
    atoms.push("mknodat");
    atoms.push("fchownat");
    atoms.push("futimesat");
    atoms.push("unlinkat");
    atoms.push("renameat");
    atoms.push("linkat");
    atoms.push("symlinkat");
    atoms.push("readlinkat");
    atoms.push("fchmodat");
    atoms.push("faccessat");
    atoms.push("pselect6");
    atoms.push("ppoll");
    atoms.push("unshare");
    atoms.push("set_robust_list");
    atoms.push("get_robust_list");
    atoms.push("splice");
    atoms.push("tee");
    atoms.push("sync_file_range");
    atoms.push("vmsplice");
    atoms.push("move_pages");
    atoms.push("utimensat");
    atoms.push("epoll_pwait");
    atoms.push("signalfd");
    atoms.push("timerfd_create");
    atoms.push("eventfd");
    atoms.push("fallocate");
    atoms.push("timerfd_settime");
    atoms.push("timerfd_gettime");
    atoms.push("accept4");
    atoms.push("signalfd4");
    atoms.push("eventfd2");
    atoms.push("epoll_create1");
    atoms.push("dup3");
    atoms.push("pipe2");
    atoms.push("inotify_init1");
    atoms.push("preadv");
    atoms.push("pwritev");
    atoms.push("rt_tgsigqueueinfo");
    atoms.push("perf_event_open");
    atoms.push("recvmmsg");
    atoms.push("fanotify_init");
    atoms.push("fanotify_mark");
    atoms.push("prlimit64");
    atoms.push("name_to_handle_at");
    atoms.push("open_by_handle_at");
    atoms.push("clock_adjtime");
    atoms.push("syncfs");
    atoms.push("sendmmsg");
    atoms.push("setns");
    atoms.push("getcpu");
    atoms.push("process_vm_readv");
    atoms.push("process_vm_writev");
    atoms.push("kcmp");
    atoms.push("finit_module");
    atoms.push("sched_setattr");
    atoms.push("sched_getattr");
    atoms.push("renameat2");
    atoms.push("seccomp");
    atoms.push("getrandom");
    atoms.push("memfd_create");
    atoms.push("kexec_file_load");
    atoms.push("bpf");
    atoms.push("execveat");
    atoms.push("userfaultfd");
    atoms.push("membarrier");
    atoms.push("mlock2");
    atoms.push("copy_file_range");
    atoms.push("preadv2");
    atoms.push("pwritev2");
    atoms.push("pkey_mprotect");
    atoms.push("pkey_alloc");
    atoms.push("pkey_free");
    atoms.push("io_pgetevents");
    atoms.push("rseq");
    atoms.push("to");
    atoms.push("_exit");
    string_cache_codegen::AtomType::new("parser::syscall::SyscallAtom", "syscall_atom!")
        .atoms(&atoms)
        .write_to_file(&Path::new(&env::var("OUT_DIR").unwrap()).join("syscall_atom.rs"))
        .unwrap();
}
